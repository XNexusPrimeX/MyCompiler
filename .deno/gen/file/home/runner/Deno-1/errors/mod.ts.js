import messages from "./messages.ts";
class InterpreterError extends Error {
    code;
    constructor(code, ...args) {
        super(buildMessage(code, args));
        this.code = code;
        Error.captureStackTrace(this, InterpreterError);
    }
    get name() {
        return `[${this.code}]`;
    }
}
export default InterpreterError;
function buildMessage(code, args) {
    const msg = messages[code];
    if (!msg)
        throw new Error(`No message associated with error code: ${code}.`);
    if (typeof msg === 'function')
        return msg(...args);
    if (!args?.length)
        return msg;
    args.unshift(msg);
    return String(...args);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL3J1bm5lci9EZW5vLTEvZXJyb3JzL21vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLFFBQVEsTUFBTSxlQUFlLENBQUM7QUFFckMsTUFBTSxnQkFBNkQsU0FBUSxLQUFLO0lBQzVFLElBQUksQ0FBUztJQUNiLFlBQVksSUFBTyxFQUFFLEdBQUcsSUFBb0M7UUFDeEQsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVoQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7SUFDNUIsQ0FBQztDQUNKO0FBRUQsZUFBZSxnQkFBZ0IsQ0FBQztBQUVoQyxTQUFTLFlBQVksQ0FBQyxJQUFzQyxFQUFFLElBQWM7SUFDeEUsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTNCLElBQUksQ0FBQyxHQUFHO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywwQ0FBMEMsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUM3RSxJQUFJLE9BQU8sR0FBRyxLQUFLLFVBQVU7UUFBRSxPQUFPLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ25ELElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTTtRQUFFLE9BQU8sR0FBRyxDQUFDO0lBRTlCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsT0FBTyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZGVuby1saW50LWlnbm9yZS1maWxlIG5vLWV4cGxpY2l0LWFueVxyXG5pbXBvcnQgY29kZXMgZnJvbSBcIi4vY29kZXMudHNcIjtcclxuaW1wb3J0IG1lc3NhZ2VzIGZyb20gXCIuL21lc3NhZ2VzLnRzXCI7XHJcblxyXG5jbGFzcyBJbnRlcnByZXRlckVycm9yPEMgZXh0ZW5kcyB0eXBlb2YgY29kZXNba2V5b2YgdHlwZW9mIGNvZGVzXT4gZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb2RlOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb2RlOiBDLCAuLi5hcmdzOiBQYXJhbWV0ZXJzPHR5cGVvZiBtZXNzYWdlc1tDXT4pIHtcclxuICAgICAgICBzdXBlcihidWlsZE1lc3NhZ2UoY29kZSwgYXJncykpO1xyXG5cclxuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEludGVycHJldGVyRXJyb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBuYW1lKCkge1xyXG4gICAgICAgIHJldHVybiBgWyR7dGhpcy5jb2RlfV1gO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbnRlcnByZXRlckVycm9yO1xyXG5cclxuZnVuY3Rpb24gYnVpbGRNZXNzYWdlKGNvZGU6IHR5cGVvZiBjb2Rlc1trZXlvZiB0eXBlb2YgY29kZXNdLCBhcmdzOiBzdHJpbmdbXSkge1xyXG4gICAgY29uc3QgbXNnID0gbWVzc2FnZXNbY29kZV07XHJcblxyXG4gICAgaWYgKCFtc2cpIHRocm93IG5ldyBFcnJvcihgTm8gbWVzc2FnZSBhc3NvY2lhdGVkIHdpdGggZXJyb3IgY29kZTogJHtjb2RlfS5gKTtcclxuICAgIGlmICh0eXBlb2YgbXNnID09PSAnZnVuY3Rpb24nKSByZXR1cm4gbXNnKC4uLmFyZ3MpO1xyXG4gICAgaWYgKCFhcmdzPy5sZW5ndGgpIHJldHVybiBtc2c7XHJcblxyXG4gICAgYXJncy51bnNoaWZ0KG1zZyk7XHJcbiAgICByZXR1cm4gU3RyaW5nKC4uLmFyZ3MpO1xyXG59Il19