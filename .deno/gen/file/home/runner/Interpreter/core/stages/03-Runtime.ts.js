import InterpreterError from "@errors";
import { comparativeOperators, multiplicitateOperators } from "../constants/Operators.ts";
export class Runtime {
    returns;
    evaluate(astNode, env) {
        switch (astNode.kind) {
            case 'Identifier': {
                return env.lookupVar(astNode.symbol);
            }
            case 'NumberLiteral': {
                return {
                    type: 'number',
                    value: astNode.value
                };
            }
            case 'StringLiteral': {
                return {
                    type: 'string',
                    value: astNode.value
                };
            }
            case 'BooleanLiteral': {
                return {
                    type: 'boolean',
                    value: astNode.value
                };
            }
            case "NullLiteral": {
                return { value: "null", type: "null" };
            }
            case "AssignExpression": {
                const variable = astNode;
                env.declareVar(variable.symbol, this.evaluate(variable.value, env));
                return { type: 'null', value: 'null' };
            }
            case "BinaryExpression": {
                const binOperation = astNode;
                console.log('astNode', astNode);
                const lhs = this.evaluate(binOperation.left, env);
                const rhs = this.evaluate(binOperation.right, env);
                return this.evalBinaryExpression(lhs, rhs, binOperation.operator);
            }
            case "Program": {
                let lastEvaluated = { type: "null", value: "null" };
                for (const statement of astNode.body) {
                    lastEvaluated = this.evaluate(statement, env);
                }
                return lastEvaluated;
            }
            default: {
                throw new InterpreterError('RuntimeError', astNode.kind);
            }
        }
    }
    evalBinaryExpression(lhs, rhs, operator) {
        let result;
        if (!comparativeOperators.includes(operator)) {
            if (lhs.type !== "number" && rhs.type !== "number") {
                throw new InterpreterError('TypeError');
            }
        }
        if (multiplicitateOperators.includes(operator)) {
            if ([lhs.value, rhs.value].includes(0)) {
                throw new InterpreterError('ZeroDivisionError');
            }
        }
        result = eval(`${lhs.value} ${operator} ${rhs.value}`);
        return {
            type: 'number',
            value: result
        };
    }
    constructor(astNode, env) {
        this.returns = this.evaluate(astNode, env);
    }
}
//# sourceMappingURL=data:application/json;base64,